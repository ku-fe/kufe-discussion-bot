---
description: 
globs: 
alwaysApply: true
---
---
Description: Express.js 사용을 위한 규칙
Globs: ["**/*.ts"]
---

# 라우팅
- **모든 API 라우트는 `routes/` 디렉토리에 모듈화하여 관리합니다.**
- **라우트 핸들러는 가급적 Controller 패턴을 따릅니다.**
- **미들웨어를 적극 활용하여 코드 중복을 방지합니다.**
- **RESTful 원칙을 따라 엔드포인트를 정의합니다.**

# 보안
- **모든 API 요청에 대해 CORS 정책을 명확히 설정합니다.**
- **입력값 검증을 위해 `express-validator` 또는 `zod`를 사용합니다.**
- **환경 변수(`.env`)를 활용하여 민감한 정보를 코드에 직접 노출하지 않습니다.**
- **보안 강화를 위해 `helmet` 및 `rate-limit`을 적용합니다.**

# 에러 핸들링
- **전역 오류 처리 미들웨어를 사용하여 예외 처리를 수행합니다.**
- **API 응답은 `res.status().json()` 형식을 따릅니다.**
- **서비스 내부 오류는 로깅하고, 사용자에게는 적절한 오류 메시지만 반환합니다.**

# 성능 최적화
- **요청이 많은 엔드포인트는 `compression` 및 `caching`을 활용하여 성능을 최적화합니다.**
- **`morgan`을 활용하여 요청 로깅을 수행합니다.**
- **데이터베이스 호출 최적화를 위해 `connection pool`을 사용합니다.**